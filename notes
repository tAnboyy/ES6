es6 = es5 + more features

var declaration- hoisted, function scope, can be redeclared
let declaration- not hoisted, block scope {}, cannot be redeclared
const declaration- not hoisted, block scope, cannot be redeclared

prefer const over let over var
use const if reassignment not expected
    let if reassignment expected

arrow function-
short,concise syntax for writing functions
simplifies behaviour of 'this' keyword

//11- lexical this
arrow function wont create its own this, rather uses parent's this
to use this from execution context, use arrow function.. else use regular JS function.

//12- default function parameters
concept

//13- rest operator
rest parameter syntax.. represents indefinite number of arguments as an array

//14- spread operator
opposite of rest
rest combines, used in function declaration
spread splits, used in function call

//15, 16- es6 object literals features

//17 destructuring arrays
items of array pulled out and assigned to individual variables

//18 destructuring objects
same concept as arrays except {} used instead of [], alias

//19 string templates
convenient way to work with strings
concatenation, single double quotes usage, multi-line strings made easier to work with

//20 for of loop
similar to for loop but loops over iterables
used on arrays,strings

//21 classes
just syntactical sugar to existing prototype based inheritance
classes are functions(typeof) but are not hoisted,whereas functions are hoisted
instance created using new keyword
adding a method to class is the same as adding a method to class's prototype

//22 class body and methods
class body can have only methods and not properties
3 types of methods- 1.constructor (only 1 per class).. constructor called when object/instance of class created
                    2.static method.. static keyword, can call without creating an object
                    3.prototype method.. called through object/instance

//23 class inheritance
using extends keyword
if derived class has no constructor, constructor of parent invoked
super keyword used- to invoke parent constructor inside child constructor
                    to call parent class methods inside child class

//24,25 modules
helps in separation of concern

//26 named exports
module imports are hoisted
can provide alias
imports are read-only.. eg- imported variables cannot be modified.. but properties of imported objects can be modified
names have to match while importing

//27 default exports
used when module exports single variable/function/class
{} not needed unless using alias
name doesn't have to match while importing

//28 exporting functions and classes
(Angular makes use of class exporting)

//29,30,31 sets
set/strong set- list of values, duplicates not allowed, used to check if value present or not, not used to access values 
weak set- can only store weak object references, not primitive values
          better memory utilization if only dealing with tracking object references
          weak object references.. NOT CLEAR.. to achieve- reference in set to disappear if other references disappear
in sets, keys and values are the same

//32,33,34,35 maps
map- key,value can be of any type unlike in objects where key is a string
forEach loop
WeakMaps- keys can only be objects and object references have to be weak ie dont interfere with garbage collection
          (no practical use-case yet)